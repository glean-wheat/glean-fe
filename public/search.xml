<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6 新语法-函数的扩展（三）</title>
      <link href="2020/11/08/ES6-%20%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95(3)/"/>
      <url>2020/11/08/ES6-%20%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95(3)/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6-函数的扩展"><a href="#ES6-函数的扩展" class="headerlink" title="ES6 函数的扩展"></a>ES6 函数的扩展</h1><h3 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><pre class=" language-JavaScript"><code class="language-JavaScript">//ES5function foo1(x,y)&#123;  y = y || 'word';  console.log(x,y);&#125;foo1('hello');// hello wordfoo1('hello','china');//hello chinafoo1('hello','');//hello word ''转为false，走默认值//ES6function foo(x,y='word')&#123;  console.log(x,y);&#125;foo('hello');// hello wordfoo('hello','china');//hello chinafoo('hello','');//hello 完美解决</code></pre><h4 id="与解构赋值默认值结合使用"><a href="#与解构赋值默认值结合使用" class="headerlink" title="与解构赋值默认值结合使用"></a>与解构赋值默认值结合使用</h4><pre class=" language-JavaScript"><code class="language-JavaScript">function foo1(&#123;x = 0, y = 0&#125; = &#123;&#125;)&#123;  return [x, y];&#125;function foo2(&#123;x, y&#125; = &#123;x:0, y:0&#125;)&#123;  return [x,y];&#125;//函数没有参数foo1();// [0,0]foo2();// [0,0]//x,y都有值foo1(&#123;x:99,y:6&#125;);//[99,6]foo2(&#123;x:99,y:6&#125;);//[99,6]//x有值，y无值foo1(&#123;x:1&#125;);//[1,0]foo2(&#123;x:1&#125;);//[1,undefined]//x，y无值foo1(&#123;&#125;);//[0,0]foo2(&#123;&#125;);//[undefined,undefined]foo1(&#123;z:1&#125;);//[0,0]foo2(&#123;z:1&#125;);//[undefined,undefined]</code></pre><h4 id="参数默认值的位置"><a href="#参数默认值的位置" class="headerlink" title="参数默认值的位置"></a>参数默认值的位置</h4><p>说明：通常情况下，有默认值的参数是函数的尾参数，如果非尾参数，则调用函数无法省略</p><pre class=" language-JavaScript"><code class="language-JavaScript">function foo(x = 1,y)&#123;  return [x, y];&#125;foo();// [1,undefined]foo(,2&#125;);//报错foo(undefined,2);//[1,2]foo(null,2);//[null,2]</code></pre><p>利用默认值可以指定某些参数不得省略</p><pre class=" language-JavaScript"><code class="language-JavaScript">function throwError() &#123;  throw new Error('Missing parameter')&#125;function foo(mustBeProvided = throwError()) &#123; return mustBeProvided;&#125;foo();//Error: Missing Parameter</code></pre><h3 id="Spread-Rest-操作符"><a href="#Spread-Rest-操作符" class="headerlink" title="Spread/Rest 操作符"></a>Spread/Rest 操作符</h3><p>说明：具体使用方法前文已经有做说明<a href="https://juejin.im/post/6889026192771923982#heading-4">ES6 新语法（一）</a>，这里统一运用一下</p><h4 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h4><pre class=" language-JavaScript"><code class="language-JavaScript">// rest参数只能位于最后一个，并且length属性不包含rest参数//报错function f(a,...b,c)&#123;  // ...&#125;(function(a)&#123;&#125;).length //1(function(...a)&#123;&#125;).length //0</code></pre><h4 id="spread-参数"><a href="#spread-参数" class="headerlink" title="spread 参数"></a>spread 参数</h4><ul><li>替代数组的 apply 方法,Math.max 方法，简化求出一个数组最大元素的写法。</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">//ES5Math.max.apply(null,[1,0,2,4]); // 4 利用apply方法，内部实现spread调用//ES6Math.max(...[1,0,2,4]); // 4//等同于Math.max(1,0,2,4); // 4</code></pre><ul><li>与解构赋值结合</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">const list = [1,0,2,4];let a,    rest[a,...rest] = list;</code></pre><ul><li>Iterator 接口对象转数组</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">var nodeList = document.querySelectorAll('div');var array = [...nodeList];</code></pre><ul><li>Map 和 Set 结构，Generator</li></ul><p>说明：扩展运算符内部调用的是数据解构的 iterator 接口</p><pre class=" language-JavaScript"><code class="language-JavaScript">var map = new Map([  [1,'a'],  [2,'b'],  [3,'c']]);var arr = [...map.keys()];//[1,2,3]</code></pre><h3 id="嵌套的箭头函数"><a href="#嵌套的箭头函数" class="headerlink" title="嵌套的箭头函数"></a>嵌套的箭头函数</h3><pre class=" language-JavaScript"><code class="language-JavaScript">//ES5function insert(value) &#123; return &#123;into:function (array)&#123;   return &#123;after:function (afterValue) &#123;     array.splice(array.indexOf(afterValue) + 1,0,value);     return array;   &#125;&#125;; &#125;&#125;;&#125;insert(2).into([1, 3]).after(1); //[1, 2, 3]//ES6let insert = (value) => (&#123;into:(array)=> (&#123;after:(afterValue)=>&#123;  array.splice(array.indexOf(afterValue) + 1,0,value);  return array;&#125;&#125;)&#125;);insert(2).into([1, 3]).after(1); //[1, 2, 3]</code></pre><h3 id="绑定-this"><a href="#绑定-this" class="headerlink" title="绑定 this"></a>绑定 this</h3><p>说明：箭头函数可以绑定 this 对象，减少了显示绑定 this 对象的写法（call、apply、bind）,ES7 又提出来了函数绑定，用来取代 call，apply，bind 调用<br>语法：函数绑定运算符是并排的两个双冒号（::），双冒号左边是一个对象，右边是一个函数，左右的对象是右边函数的上下文环境，即 this 对象</p><pre class=" language-JavaScript"><code class="language-JavaScript">foo::bar;//等同于bar.bind(foo); //bind返回一个函数不立即执行foo::bar(...arguments);//等同于bar.apply(foo,arguments);</code></pre><p>如果双冒号左边为空，右边是一个对象的方法，则等于该对象为上下文环境</p><pre class=" language-JavaScript"><code class="language-JavaScript">var method = obj::obj.foo;//obj.foo是对象方法//等同于var method = ::obj.foo;//省略var log = ::console.log;//等同于var log = console.log.bind(console);log('hello word');//'hello word'</code></pre><h3 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><p>说明：函数调用会在内部形成一个‘调用记录’，称为“调用帧”（call frame），保存调用位置和内部变量信息。如果在 A 函数内部调用 B，那么在 A 的调用栈上面会形成一个 B 的调用帧，等到 B 运行结束，将结果返回 A，B 的调用栈才会消失，如果函数 B 内部还有函数 C,会形成一个 C 的调用帧，以此类推，所有的调用帧形成一个“调用栈”（call stack）</p><pre class=" language-JavaScript"><code class="language-JavaScript">function f()&#123;  var a = 1;  var b = 2;  return g(a + b);&#125;;f();//等同于function f()&#123;  return g(3);&#125;;f();//等同于g(3);</code></pre><p>上述代码中，由于调用函数 g 之后，函数 f 就结束了，所以执行到 g()的时候，可以删除 f()的调用振，只保留 g(3)的调用帧。<br>这就叫做”尾调用优化”(Tail call optimization)TCO,即只保留内层函数的调用帧，节省内存。</p><p>注意：只有内层函数不再用到外层函数的内部变量，内部函数调用帧才会取代外层函数调用帧，否则无法”尾调用优化”，如下例子</p><pre class=" language-JavaScript"><code class="language-JavaScript">function f(a)&#123;  var one = 1;  function f2(b) &#123;   return b + one;  &#125;  return f2(a)&#125;f(2);//3</code></pre><h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><p>说明：函数调用自身，是递归，函数尾调用自己是尾递归</p><p>尾递归非常消耗内存，容易造成”栈溢出”（stack overflow），但是尾递归，只存在一个调用帧，不会造成栈溢出</p><pre class=" language-JavaScript"><code class="language-JavaScript">function factorial(n) &#123;  if (n === 1) return 1;  return n * factorial(n - 1);&#125;factorial(5) // 120</code></pre><p>上述例子是一个阶乘函数，复杂度为 O(n),改为尾递归，复杂度为 O(1).</p><pre class=" language-JavaScript"><code class="language-JavaScript">function factorial(n,total) &#123;  if (n === 1) return total;  return factorial(n - 1,n*total);&#125;factorial(5,1) // 120</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 新语法（二）</title>
      <link href="2020/11/08/ES6-%20%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95(2)/"/>
      <url>2020/11/08/ES6-%20%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95(2)/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6-新语法（二）"><a href="#ES6-新语法（二）" class="headerlink" title="ES6 新语法（二）"></a>ES6 新语法（二）</h1><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><ul><li>从伪数组变为真正的数组</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">let arrayList = &#123;  '0':'a',  '1':'b',  '2':'c',  length:3&#125;//ES5写法var arr1 = [].slice.call(arrayList);//['a','b','c']//相当于 Array.prototype.slice.call(arrayList)//ES6写法var arr2 = Array.from(arrayList); // ['a','b','c']</code></pre><ul><li>从 Set 生成数组（包含合并去重）PS:后续详解 Set 用法</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">var set =  new Set([1,2,3,4,5,6,6,7]);Array.from(set);//[1, 2, 3, 4, 5, 6, 7]</code></pre><ul><li>从 Map 生成数组 PS:后续详解 Map 用法</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">var map = new Map([[1,2],[2,3],[3,4]]);Array.from(map);//[[1,2],[2,3],[3,4]]var maps = new Map([['1','a'],['2','b'],['3',:'c']]);Array.from(maps.value()); // ["a", "b", "c"]Array.from(maps.key());//["1", "2", "3"]</code></pre><ul><li>从类数组（arguments）生成数组</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">function foo() &#123;  return Array.from(arguments)&#125;foo(1,2,3);//[1,2,3]//arguments对象也可function foos() &#123;  return [...arguments]&#125;foos(4,5,6);//[4,5,6]</code></pre><ul><li>在 Array.from 里面进行运算</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">var arr = [1,2,3]Array.from(arr,item => item*2);//[2, 4, 6]</code></pre><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><p>作用：将一组数值转为数组，目的是为了补充 Array 的不足</p><pre class=" language-JavaScript"><code class="language-JavaScript">Array.of();//[]Array.of(undefined);//[undefined]Array.of(3);//3]Array.of(3).length;//1Array.of(9,9,6);//[9,9,6]// Array必须包含两个个及以上方可转为新的数组Array();[]Array(3);[, , ,]Array(9,9,6);//[9,9,6]</code></pre><h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h3><p>说明：数组实力的 copyWithin()方法，在当前数组内部，将指定位置的值复制到其它位置（覆盖），并返回当前数组（原有数组改变）</p><table><thead><tr><th align="left">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">target</td><td align="center">必须，从该位置进行替换</td></tr><tr><td align="left">start</td><td align="center">可选，从该位置读取替换数据，默认未 0，负值表示倒数</td></tr><tr><td align="left">end</td><td align="center">可选，到该位置停止读取替换数据，默认为数组长度，负值表示倒数</td></tr></tbody></table><pre class=" language-JavaScript"><code class="language-JavaScript">[1,0,2,4,9,9,6].copyWithin(0,4);//[9,9,6,4,9,9,6][1,0,2,4,9,9,6].copyWithin(0,4,5);//[9,0,2,4,9,9,6][1,0,2,4,9,9,6].copyWithin(0,-3,-1);//[9,9,2,4,9,9,6]</code></pre><p>通过一个例子手写 copyWithin 内部实现原理</p><pre class=" language-JavaScript"><code class="language-JavaScript">[].copyWithin.call(&#123;length:5,3:1&#125;,0,3);//结果为 &#123;0：1, 3:1, length:5&#125;// &#123;length:5,3:1&#125;具有length属性，是一个类数组，存在key：value键值对（3：1），等价数组对象。// copyWithin()方法执行过程为读取到key为3的value(1),并将其赋值到指定位置。function foo(objectArray,targetIndex,startIndex)&#123;  var target = targetIndex; // 缓存开始替换位置坐标  for(var i = startIndex; i< objectArray.length; i++) &#123; // 从目标位置开始循环    if(objectArray.hasOwnProperty(i))&#123; // 是否包含value      objectArray[target] = objectArray[i]; // 如果有则放在开始位置的value位置    &#125;else&#123;      delete objectArray[target]; // 没有则删除    &#125;  target++; //  逐个替换  &#125;  return objectArray;&#125;foo(&#123;length:5, 3:1&#125;, 0, 3);//&#123;0: 1, 3: 1, length: 5&#125;foo(&#123;length:8, 6:10&#125;, 1, 3);//&#123;4: 10, 6: 10, length: 8&#125;</code></pre><p>通过 ES6 Array.from 来暴力理解</p><pre class=" language-JavaScript"><code class="language-JavaScript">[].copyWithin.call(&#123;length:5,3:1&#125;,0,3);//call 更改this指向[&#123;length:5&#125;,3:1].copyWithin(0,3);// Array.from()类数组转换Array.from(&#123;length:5,3:1&#125;); //[undefined, undefined, undefined, 1, undefined][undefined, undefined, undefined, 1, undefined].copyWithin(0,3);//[1, undefined, undefined, 1, undefined]//忽略undefined，补上length[0:1,3:1,length:5]</code></pre><h3 id="find-和-findIndex"><a href="#find-和-findIndex" class="headerlink" title="find 和 findIndex()"></a>find 和 findIndex()</h3><p>说明：find 为找到第一个符合条件的元素并返回；findIndex 为找到第一个符合条件的元素并返回下标,如果没有返回-1。</p><pre class=" language-JavaScript"><code class="language-JavaScript">[1,0,2,5,9,9,6].find(val => val > 5); // 9[1,0,2,5,9,9,6].find(val,index,arr)&#123; // 当前值，下标，原数组  return value > 5;&#125;; // 9[1,0,2,5,9,9,6].findIndex(val => val > 5); // 4[1,0,2,5,9,9,6].findIndex(val => val > 10); // -1</code></pre><h3 id="entries-，keys-和-values"><a href="#entries-，keys-和-values" class="headerlink" title="entries()，keys()和 values()"></a>entries()，keys()和 values()</h3><pre class=" language-JavaScript"><code class="language-JavaScript">for(var i of['a','b'].keys())&#123;  console.log(i);  //0  //1 对键值名进行遍历&#125;for(var i of['a','b'].values())&#123;  console.log(i);  //a  //b 对键值进行遍历&#125;for(var i of['a','b'].emtries())&#123;  console.log(i);  //[0, "a"]  //[1, "b"] 对键值对进行遍历&#125;</code></pre><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><pre class=" language-JavaScript"><code class="language-JavaScript">[9,9,6].includes(9);//true[9,9,6].includes(1);//false</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 新语法（一）</title>
      <link href="2020/11/08/ES6-%20%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95(1)/"/>
      <url>2020/11/08/ES6-%20%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95(1)/</url>
      
        <content type="html"><![CDATA[<h3 id="ES6-新语法（一）"><a href="#ES6-新语法（一）" class="headerlink" title="ES6 新语法（一）"></a>ES6 新语法（一）</h3><h4 id="1-let-const"><a href="#1-let-const" class="headerlink" title="1. let const"></a>1. let const</h4><p>let 和 const 相遇比 var 有两个重要的不同点</p><ul><li><p>let 和 const 没有声明提升，只存在块级作用域</p></li><li><p>let 和 const 只能声明一次</p></li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">function ES6() &#123;  let a = 1;  const b = 2;  console.log(a,b);// 1,2&#125;console.log(a,b);// a is not definedfunction ES6() &#123;  let a = 1;  const b = 2;  const b = 3;  console.log(a,b);// Identifier 'b' has already been declared&#125;</code></pre><h4 id="2-模板字符串"><a href="#2-模板字符串" class="headerlink" title="2. 模板字符串"></a>2. 模板字符串</h4><p>ES5 处理拼接字符串：</p><pre><code>let data = &#123;userName:&#39;张三&#39;,age:&#39;18&#39;&#125;&#39;the userName is &#39; + data.userName + &#39;age is &#39;+ data.age //the userName is 张三 age is 18`the userName is $&#123;data.userName&#125; age is $&#123;data.age&#125;` //the userName is 张三 age is 18</code></pre><h4 id="3-箭头函数"><a href="#3-箭头函数" class="headerlink" title="3. 箭头函数"></a>3. 箭头函数</h4><p>说明：箭头函数是一种函数简写，去除 function 关键字，括号里面为参数，跟随一个 =&gt;</p><p>特点：</p><ul><li><p>不需要 function 关键字</p></li><li><p>省略 return 关键字</p></li><li><p>继承上下文 this</p></li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">// ES5let add = function (a,b) &#123;  return a + b;&#125;// 使用箭头函数let add = (a,b) => a + b;</code></pre><p>箭头函数没有自己的 this,使用 call(),apply(),bind()时，第一个参数被忽略，call()内部实现为调用传入函数的 this 指向，箭头函数没有 this,所以忽略</p><pre class=" language-JavaScript"><code class="language-JavaScript">let adder = &#123;  base : 1,  add : function(a) &#123;    let f = v => v + this.base;    return f(a);  &#125;,  addThruCall: function(a) &#123;    let f = v => v + this.base;    let b = &#123;      base : 2    &#125;;    return f.call(b, a);  &#125;&#125;;console.log(adder.add(1));         // 输出 2console.log(adder.addThruCall(1)); // this作用域仍然是adder，所以仍然输出2</code></pre><p>支持默认传参和解构赋值</p><pre class=" language-JavaScript"><code class="language-JavaScript">let f = ([a,b] = [1,2], &#123;x: c&#125; = &#123;x: a + b&#125;) => a + b + c;f() // 6</code></pre><h4 id="4-函数参数默认值"><a href="#4-函数参数默认值" class="headerlink" title="4. 函数参数默认值"></a>4. 函数参数默认值</h4><pre class=" language-JavaScript"><code class="language-JavaScript">//ES5:function defaultValue(test) &#123;  test = test || 'default';  return test;&#125;defaultValue(); // 'default'defaultValue('kaqi007'); // 'kaqi007'//ES6://function声明函数function defaultValue(test = 'default') &#123;  return test;&#125;// 箭头函数(test = 'default') => &#123;  return test;&#125;defaultValue(); // 'default'defaultValue('kaqi007'); // 'kaqi007'</code></pre><h4 id="5-Spread-Rest-操作符-三点运算符"><a href="#5-Spread-Rest-操作符-三点运算符" class="headerlink" title="5. Spread/Rest 操作符(三点运算符)"></a>5. Spread/Rest 操作符(三点运算符)</h4><p>Spread 是扩展运算符，用于数组的解析于构造</p><pre class=" language-JavaScript"><code class="language-JavaScript">// 构造let arr1 = [1,0,2,4];let arr2 = [9,9,6];let arrAdd = [...arr1,...arr2];console.log(arrAdd);// [1, 0, 2, 4, 9, 9, 6]function foo(a,b,c,d)&#123;  console.log(a,b,c,d)&#125;let arr = [1,0,2,4] // 1 0 2 4foo(...arr)// 解析let arrSon1, arrSon2;[arrSon1, ...arrSon2] = arr1;console.log(arrSon1);//1console.log(arrSon2);//[2,3,4]</code></pre><p>Rest 是剩余运算符，让所有参数变为一个统一变量</p><pre class=" language-JavaScript"><code class="language-JavaScript">function foo(...args)&#123;  console.log(args)&#125;foo(1,0,2,4,9,9,6);// [1, 0, 2, 4, 9, 9, 6]</code></pre><h4 id="6-解构赋值"><a href="#6-解构赋值" class="headerlink" title="6. 解构赋值"></a>6. 解构赋值</h4><pre class=" language-JavaScript"><code class="language-JavaScript">const student = &#123;    name: 'Sam',    age: 22,    sex: '男'&#125;// ES5；const name = student.name;const age = student.age;const sex = student.sex;console.log(name , age , sex);// Sam 22 男// ES6const &#123; name, age, sex &#125; = student;console.log(name , age , sex);// Sam 22 男const student = ['Sunny', 20, '女'];// ES5；const name = student.name;const age = student.age;const sex = student.sex;console.log(name , age , sex);// Sunny 20 女// ES6const &#123; name, age, sex &#125; = student;console.log(name , age , sex);// Sunny 20 女</code></pre><h4 id="7-模块化"><a href="#7-模块化" class="headerlink" title="7. 模块化"></a>7. 模块化</h4><pre class=" language-JavaScript"><code class="language-JavaScript">// a.jslet a = 2export &#123;a&#125; // 解构赋值，相当于&#123;a: 2&#125;// b.jsimport &#123;a&#125; form 'a.js'console.log(a) // 2</code></pre><h4 id="8-超类"><a href="#8-超类" class="headerlink" title="8. 超类"></a>8. 超类</h4><pre class=" language-JavaScript"><code class="language-JavaScript">var parent = &#123;  foo() &#123;   console.log('我是父级')  &#125;&#125;var child = &#123;  foo() &#123;  super.foo();   console.log('我是子级')  &#125;&#125;Object.setPrototypeOf(child,parent);child.foo(); //'我是父级' &nbps '我是子级'</code></pre><p>补充：setPrototypeOf，接收两个参数，第一个为现有对象，第二个为原型对象，相当于在 child.<em>proto</em>添加了实例原型，形成原型链，自身找不到，会去父级进行寻找属性或方法</p><h4 id="9-class-和继承"><a href="#9-class-和继承" class="headerlink" title="9. class 和继承"></a>9. class 和继承</h4><ul><li>class：js 只有对象本质是没有 class 类这个概念，只是函数包装后的语法糖</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">class Person &#123;  constructor (name,age) &#123;    this.name = name;    this.age = age;  &#125;  print() &#123;   console.log(this.name); // kaqi   console.log(this.age); // 22  &#125;&#125;var person = new Person('kaqi',22);person.print();</code></pre><ul><li>继承：用到 extends 和 super</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">class Child extends Person &#123; constructor (name,age,sex) &#123;   super(name,age);   this.sex = sex; &#125; print() &#123;   console.log(this.name); // kaqi   console.log(this.age); // 22   console.log(this.sex); // 男 &#125;&#125;var child = new Child('kaqi', 22 ,'男');child.print();</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 基础类型Array的常用方法</title>
      <link href="2020/11/08/Array-%E5%B8%B8%E7%94%A8API/"/>
      <url>2020/11/08/Array-%E5%B8%B8%E7%94%A8API/</url>
      
        <content type="html"><![CDATA[<h2 id="Array-对象上常用的方法"><a href="#Array-对象上常用的方法" class="headerlink" title="Array 对象上常用的方法"></a>Array 对象上常用的方法</h2><h3 id="不改变原数组的方法"><a href="#不改变原数组的方法" class="headerlink" title="不改变原数组的方法"></a>不改变原数组的方法</h3><h4 id="1-concat"><a href="#1-concat" class="headerlink" title="1.concat()"></a>1.concat()</h4><p><strong>语法：</strong> array.concat(array1,array2,…,arrayN)</p><p><strong>功能：</strong> 连接两个或多个数组</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 0, 2, 4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 0, 2, 4, 9, 9, 6]</span></code></pre><h4 id="2-slice"><a href="#2-slice" class="headerlink" title="2.slice()"></a>2.slice()</h4><p><strong>语法：</strong>array.slice(start,end)</p><p><strong>功能：</strong>截取所需要的字符串</p><h3 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 0, 2, 4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [0]</span></code></pre><h4 id="3-join"><a href="#3-join" class="headerlink" title="3.join()"></a>3.join()</h4><p><strong>语法：</strong>array.join(‘-‘)</p><p><strong>功能：</strong>合并所有字符串为一个字符串</p><h2 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 0, 2, 4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1-0-2-4</span></code></pre><h4 id="4-toString"><a href="#4-toString" class="headerlink" title="4.toString()"></a>4.toString()</h4><p>语法：array.toString()</p><p>功能：把数组转为字符串</p><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 0, 2, 4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "1,0,2,4"</span></code></pre><h3 id="改变原有数组方法"><a href="#改变原有数组方法" class="headerlink" title="改变原有数组方法"></a>改变原有数组方法</h3><h3 id="1-fill"><a href="#1-fill" class="headerlink" title="1.fill()"></a>1.fill()</h3><p>语法：array.fill(value,start,end)</p><p>参数：<br>| 参数 | 描述 |<br>| :— | :—: |<br>| value| 必须，填充的值 |<br>| start| 可选，开始填充的位置 |<br>| end | 可选，结束填充位置（默认为 array.length） |</p><p>功能：向原数组填充值,并替换掉原有的值</p><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [9, 9, 9, 9]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>arr2<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 0, 9, 9]</span>arr2<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 0, 9, 4]</span></code></pre><h3 id="2-pop"><a href="#2-pop" class="headerlink" title="2.pop()"></a>2.pop()</h3><p>语法：array.pop()</p><p>功能：删除并返回数组的最后一个元素，如果数组为空，返回 undefined</p><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">var</span> returnValue <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, 0, 2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//4</span></code></pre><h3 id="3-push"><a href="#3-push" class="headerlink" title="3.push()"></a>3.push()</h3><p>语法：array.push()</p><p>功能：向数组末尾添加一个或多个元素</p><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, 0, 2, 4, 9]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, 0, 2, 4, 9, 9, 6]</span></code></pre><h3 id="4-shift"><a href="#4-shift" class="headerlink" title="4.shift()"></a>4.shift()</h3><p>语法：array.shift()</p><p>功能：删除数组第一个元素，并返回</p><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">var</span> returnValue <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[0, 2, 4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1]</span></code></pre><h3 id="5-unshift"><a href="#5-unshift" class="headerlink" title="5.unshift()"></a>5.unshift()</h3><p>语法：array.unshift(newVal1,newVal2,newVal3,…,newValN)</p><p>功能：向数组开始位置添加一个或者多个元素</p><p>参数：<br>|参数|描述|<br>|:—:|:—:|<br>|newVal1|必须，向数组添加的第一个元素|<br>|newVal2|可选，向数组添加的第二个元素|<br>|newValN|可选，向数组添加的第 N 个元素|</p><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[9, 9, 6, 1, 0, 2, 4]</span></code></pre><h3 id="6-splice"><a href="#6-splice" class="headerlink" title="6.splice()"></a>6.splice()</h3><p>语法：array.splice(index,howmany,newVal1,…,newValN)</p><p>功能：向数组开始位置添加一个或者多个元素</p><p>参数：<br>|参数|描述|<br>|:—:|:—:|<br>|index|必须，删除/添加的位置，负数则为从末尾处开始计数|<br>|howmany|必须，删除项目数量，0 为不删除|<br>|newVal1,…,newValN|可选，向数组添 N 个新元素|</p><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>arr2<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, 4]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, 9, 9, 6, 4]</span></code></pre><h3 id="7-reverse"><a href="#7-reverse" class="headerlink" title="7.reverse()"></a>7.reverse()</h3><p>语法：array.reverse()</p><p>功能：翻转数组</p><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[4, 2, 0, 1]</span></code></pre><h3 id="8-sort"><a href="#8-sort" class="headerlink" title="8.sort()"></a>8.sort()</h3><p>语法：array.sort(sortby)</p><p>参数：<br>|参数|描述|<br>|:—:|:—:|<br>|sortby|可选，函数|</p><p>说明：</p><ul><li><p>如果不填参数，需要转为字符串，按照字符编码自动排序</p></li><li><p>参数为函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sortNumber</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>a &lt; b 则 a 在 b 前面，a - b &lt; 0 为升序</p><p>a = b 不变</p><p>a &lt; b 则 a 在 b 后面 a - b &gt; 0 为降序升序</p></li></ul><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, 2, 3, 5, 6, 9]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [9, 6, 5, 3, 2, 1]</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用webpack打包基础库并发布至npm</title>
      <link href="2020/10/25/webpack-%E4%BD%BF%E7%94%A8webpack%E6%89%93%E5%8C%85%E5%9F%BA%E7%A1%80%E5%BA%93%E5%B9%B6%E5%8F%91%E5%B8%83%E8%87%B3npm/"/>
      <url>2020/10/25/webpack-%E4%BD%BF%E7%94%A8webpack%E6%89%93%E5%8C%85%E5%9F%BA%E7%A1%80%E5%BA%93%E5%B9%B6%E5%8F%91%E5%B8%83%E8%87%B3npm/</url>
      
        <content type="html"><![CDATA[<p>webpack 除了打包应用，也可以用来打包自己写的一些 js 库</p><blockquote><p>单纯只是打包 js 库和组件库的话 使用 rollup 打包也是一个不错的选择。</p></blockquote><p>我们来实现一个简单的打包例子，这个例子需要满足以下几点功能:</p><ul><li><p>需要支持打包压缩版(x.min.js)和非压缩版本(x.js)</p></li><li><p>支持 AMD/CJS/ESM 模块引入</p></li><li><p>支持通过 script 脚本直接引入链接</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ESM</span><span class="token keyword">import</span> HiRequest Tool <span class="token keyword">from</span> <span class="token string">'hi-request'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cjs</span><span class="token keyword">const</span> HiRequest <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hi-request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// AMD</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hi-request'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// script 脚本</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://xxx.com/hi-request.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="如何将库暴露出去？"><a href="#如何将库暴露出去？" class="headerlink" title="如何将库暴露出去？"></a>如何将库暴露出去？</h2><ul><li><p><a href="https://webpack.docschina.org/guides/author-libraries/#expose-the-library">library</a>：指定库的全局变量</p></li><li><p><a href="https://webpack.docschina.org/configuration/output/">libraryTarget</a>：支持库引入的方式</p></li></ul><pre class=" language-js"><code class="language-js"> output<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>    library<span class="token punctuation">:</span> <span class="token string">'HiRequest'</span><span class="token punctuation">,</span>    libraryTarget<span class="token punctuation">:</span> <span class="token string">'umd'</span><span class="token punctuation">,</span>    libraryExport<span class="token punctuation">:</span> <span class="token string">'default'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><h3 id="1-构建项目"><a href="#1-构建项目" class="headerlink" title="1. 构建项目"></a>1. 构建项目</h3><pre class=" language-sh"><code class="language-sh">mkdir hi-reqestcd hi-reqestnpm init -ynpm i webpack webpack-cli</code></pre><h3 id="2-新建目录-src-index-js-编写我们的工具代码"><a href="#2-新建目录-src-index-js-编写我们的工具代码" class="headerlink" title="2.新建目录 src/index.js,编写我们的工具代码"></a>2.新建目录 src/index.js,编写我们的工具代码</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 自己随便写点代码</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发出请求'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3-安装terser-webpack-plugin-压缩插件"><a href="#3-安装terser-webpack-plugin-压缩插件" class="headerlink" title="3. 安装terser-webpack-plugin 压缩插件"></a>3. 安装<a href="https://github.com/webpack-contrib/terser-webpack-plugin">terser-webpack-plugin</a> 压缩插件</h3><p><strong>用 terser-webpack-plugin 替换掉 uglifyjs-webpack-plugin 解决 uglifyjs 不支持 es6 语法问题</strong></p><pre class=" language-sh"><code class="language-sh">npm i terser-webpack-plugin -D</code></pre><h3 id="4-新建-webpack-config-js"><a href="#4-新建-webpack-config-js" class="headerlink" title="4. 新建 webpack.config.js"></a>4. 新建 webpack.config.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'terser-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  entry<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">'hi-request.min'</span><span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>    library<span class="token punctuation">:</span> <span class="token string">'HiRequest'</span><span class="token punctuation">,</span>    libraryTarget<span class="token punctuation">:</span> <span class="token string">'umd'</span><span class="token punctuation">,</span>    libraryExport<span class="token punctuation">:</span> <span class="token string">'default'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  optimization<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    minimize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    minimizer<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        terserOptions<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          output<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            comments<span class="token punctuation">:</span> <span class="token boolean">false</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        extractComments<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        include<span class="token punctuation">:</span> <span class="token regex">/\.min\.js$/</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="5-修改-package-json-添加打包命令"><a href="#5-修改-package-json-添加打包命令" class="headerlink" title="5. 修改 package.json 添加打包命令"></a>5. 修改 package.json 添加打包命令</h3><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"hi-request"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0-rc.1"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"Promise based HTTP client for the browser"</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>    <span class="token string">"prepublish"</span><span class="token punctuation">:</span> <span class="token string">"webpack"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token string">"repository"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"git@github.com:wugaoliang1116/hi-request.git"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token string">"keywords"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"react"</span><span class="token punctuation">,</span>    <span class="token string">"request"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">"HiUI-team"</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"axios"</span><span class="token punctuation">:</span> <span class="token string">"^0.18.0"</span><span class="token punctuation">,</span>    <span class="token string">"js-cookie"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.1"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"terser-webpack-plugin"</span><span class="token punctuation">:</span> <span class="token string">"^1.4.5"</span><span class="token punctuation">,</span>    <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^5.1.3"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="6-设置入口文件-不同环境下使用不同的入口文件"><a href="#6-设置入口文件-不同环境下使用不同的入口文件" class="headerlink" title="6.设置入口文件 不同环境下使用不同的入口文件"></a>6.设置入口文件 不同环境下使用不同的入口文件</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通过环境变量来决定入口文件</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./dist/hi-request.min.js'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./dist/hi-request.js'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="7-发布"><a href="#7-发布" class="headerlink" title="7. 发布"></a>7. 发布</h3><pre class=" language-sh"><code class="language-sh">npm publish // 这个步骤可能要登录  npm login</code></pre><p>完整代码参见<a href="https://github.com/wugaoliang1116/hi-request">github</a>地址</p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Blob将一个字符串保存为各种文件</title>
      <link href="2020/10/15/Blob-%E9%80%9A%E8%BF%87Blob%E5%B0%86%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BF%9D%E5%AD%98%E4%B8%BA%E5%90%84%E7%A7%8D%E6%96%87%E4%BB%B6/"/>
      <url>2020/10/15/Blob-%E9%80%9A%E8%BF%87Blob%E5%B0%86%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BF%9D%E5%AD%98%E4%B8%BA%E5%90%84%E7%A7%8D%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>结合 <a href="https://github.com/zerolab-fe/one-question-per-day/issues/78">#78</a>文章中讲到了将服务端给的二进制文件直接进行保存；二进制文件中包含了文件类型和内容；如果实现纯前端保存一段字符串为.txt、.js、css 文件呢。其他的文件类型都是可以的；<br>自己封装了一个方法，</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> downloadFileByBlob <span class="token operator">=</span> <span class="token punctuation">(</span>blobUrl<span class="token punctuation">,</span> filename<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> eleLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  eleLink<span class="token punctuation">.</span>download <span class="token operator">=</span> filename  eleLink<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>  eleLink<span class="token punctuation">.</span>href <span class="token operator">=</span> blobUrl  <span class="token comment" spellcheck="true">// 触发点击</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>eleLink<span class="token punctuation">)</span>  eleLink<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 然后移除</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>eleLink<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> downFile <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">,</span> type<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> blobContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>config<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span> type  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> blobUrl <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blobContent<span class="token punctuation">)</span>  <span class="token function">downloadFileByBlob</span><span class="token punctuation">(</span>blobUrl<span class="token punctuation">,</span> name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 需要注意</span>  window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>blobUrl<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> downFiles <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> jsCode<span class="token punctuation">,</span> cssCode <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    title<span class="token punctuation">:</span> <span class="token string">'文件名称'</span><span class="token punctuation">,</span>    jsCode<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`const test ='hello word'`</span></span><span class="token punctuation">,</span>    cssCode<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`.test&amp;#123;                width:100px          &amp;#125;`</span></span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">downFile</span><span class="token punctuation">(</span>jsCode<span class="token punctuation">,</span> <span class="token string">'text/javascript'</span><span class="token punctuation">,</span> title <span class="token operator">+</span> <span class="token string">'.jsx'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 根据文件类型；传入一个合适的 MIME 类型</span>  <span class="token function">downFile</span><span class="token punctuation">(</span>cssCode<span class="token punctuation">,</span> <span class="token string">'text/css'</span><span class="token punctuation">,</span> title <span class="token operator">+</span> <span class="token string">'.scss'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在每次调用 createObjectURL() 方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，每个对象必须通过调用 URL.revokeObjectURL() 方法来释放。</p><p>浏览器在 document 卸载的时候，会自动释放它们，但是为了获得最佳性能和内存使用状况，你应该在安全的时机主动释放掉它们。</p><h3 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h3><p><a href="https://www.w3school.com.cn/media/media_mimeref.asp">MIME</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Blob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>contenteditable 属性详解</title>
      <link href="2020/10/14/Contenteditable-%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/10/14/Contenteditable-%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天在编写组件的时候遇到了一个问题，就是要求输入框的高度随着内容自动变高；textarea 本身肯定是不支持的；立刻就想到了 contenteditable 属性</p></blockquote><pre class=" language-html"><code class="language-html">开头安利一个小技巧 在地址栏输入 data:text/html,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">contenteditable</span><span class="token punctuation">></span></span>  这样浏览器就变成了编辑器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="关于-HTML-部分"><a href="#关于-HTML-部分" class="headerlink" title="关于 HTML 部分"></a>关于 HTML 部分</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">contenteditable</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里面的内容是可以编辑的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="script-部分"><a href="#script-部分" class="headerlink" title="script 部分"></a>script 部分</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> editorWrapper <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#editable'</span><span class="token punctuation">)</span>editorWrapper<span class="token punctuation">.</span>onblur <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失去焦点'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>editorWrapper<span class="token punctuation">.</span>onfocus <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取焦点'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>editorWrapper<span class="token punctuation">.</span>oninput <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'模拟change事件'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="支持以下事件"><a href="#支持以下事件" class="headerlink" title="支持以下事件;"></a>支持以下事件;</h3><ul><li>当失去焦点时; <strong>editable.onblur=function(e){}</strong> 事件</li><li>当获取焦点时; <strong>editable.onfocus=function(e){}</strong> 事件</li><li>使用 oninput 来的代替 onChange 事件<br><strong>但是常用的 change 事件是不支持的;</strong></li></ul><h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">contenteditable</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里面的内容是可以编辑的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> editorWrapper <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#editable'</span><span class="token punctuation">)</span>    editorWrapper<span class="token punctuation">.</span>onblur <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失去焦点'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    editorWrapper<span class="token punctuation">.</span>onfocus <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取焦点'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    editorWrapper<span class="token punctuation">.</span>oninput <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'模拟change事件'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> contenteditable </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html中的DOM节点转成图片并上传</title>
      <link href="2020/10/14/Blob-Html%E4%B8%AD%E7%9A%84DOM%E8%8A%82%E7%82%B9%E8%BD%AC%E6%88%90%E5%9B%BE%E7%89%87%E5%B9%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>2020/10/14/Blob-Html%E4%B8%AD%E7%9A%84DOM%E8%8A%82%E7%82%B9%E8%BD%AC%E6%88%90%E5%9B%BE%E7%89%87%E5%B9%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在开发中遇到遇到将用户选取的节点区域，生成截图，并上传<br>实现起来比较容易，我在此分享给大家</p></blockquote><p>首先大家先要认识一下 <code>html2canvas</code> 这个库；<a href="http://html2canvas.hertzen.com/">文档地址</a>，整体使用起来是比较简单的<br>也可以继续深入研究，这个库的社区还是很活跃的。</p><h3 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h3><p>另外大家需要简单了解一下 Blob,一直以来，JS 都没有比较好的可以直接处理二进制的方法。而 Blob 的存在，允许我们可以通过 JS 直接操作二进制数据。</p><pre><code>一个Blob对象就是一个包含有只读原始数据的类文件对象。Blob对象中的数据并不一定得是JavaScript中的原生形式。File接口基于Blob，继承了Blob的功能,并且扩展支持了用户计算机上的本地文件。</code></pre><p>Blob 对象可以看做是存放二进制数据的容器，此外还可以通过 Blob 设置二进制数据的 MIME 类型</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob">MDN 文档地址</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>npm i html2canvas --save</code><br><code>import html2canvas from &#39;html2canvas&#39;</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'节点ID'</span><span class="token punctuation">)</span><span class="token function">html2canvas</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>canvas <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> base64Img <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 通过生成的base64 图片，将其转成Blob</span>  <span class="token keyword">const</span> filesImg <span class="token operator">=</span> <span class="token function">base64ToBlob</span><span class="token punctuation">(</span>base64Img<span class="token punctuation">)</span>  <span class="token function">uploadImg</span><span class="token punctuation">(</span>filesImg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> base64ToBlob <span class="token operator">=</span> code <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> parts <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';base64,'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> contentType <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> raw <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">atob</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> rawLength <span class="token operator">=</span> raw<span class="token punctuation">.</span>length  <span class="token keyword">let</span> uInt8Array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>rawLength<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rawLength<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    uInt8Array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> raw<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>uInt8Array<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> contentType <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> uploadImg <span class="token operator">=</span> filesImg <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  param<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> filesImg<span class="token punctuation">,</span> updataTypes<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 调用自己的上传  这样就行了</span>  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span> <span class="token string">'upload'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 文件参数</span>    data<span class="token punctuation">:</span> param<span class="token punctuation">,</span>    file<span class="token punctuation">:</span> filesImg<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 文件x/</span>    params<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      name<span class="token punctuation">:</span> formValue<span class="token punctuation">.</span>blockName    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 其他参数</span>    withCredentials<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    onUploadProgress<span class="token punctuation">:</span> event <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'上传结果'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 上传进度</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Blob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Blob实现前端下载文件</title>
      <link href="2020/10/14/Blob-%E9%80%9A%E8%BF%87Blob%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
      <url>2020/10/14/Blob-%E9%80%9A%E8%BF%87Blob%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在封装请求库的时候，想要把 download 方法也集成到自己的请求库中，自己想了一下下载的方式进行一下记录</p></blockquote><h3 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h3><p>先撸代码吧</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">const</span> download <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">,</span> host<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> filename <span class="token operator">=</span> <span class="token string">'未命名'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> options  <span class="token keyword">const</span> url <span class="token operator">=</span> host <span class="token operator">?</span> host <span class="token operator">+</span> options<span class="token punctuation">.</span>url <span class="token punctuation">:</span> options<span class="token punctuation">.</span>url  <span class="token comment" spellcheck="true">// 设置类型，防止出现乱码</span>  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> responseType<span class="token punctuation">:</span> <span class="token string">'blob'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">...</span>options<span class="token punctuation">,</span> url <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> downloadSuccess <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> options      <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> downloadElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> href <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 创建下载的链接</span>      downloadElement<span class="token punctuation">.</span>href <span class="token operator">=</span> href      downloadElement<span class="token punctuation">.</span>download <span class="token operator">=</span> filename <span class="token comment" spellcheck="true">// 下载后文件名</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>downloadElement<span class="token punctuation">)</span>      downloadElement<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 点击下载</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>downloadElement<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 下载完成移除元素</span>      window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 释放blob对象</span>      downloadSuccess <span class="token operator">&amp;&amp;</span> <span class="token function">downloadSuccess</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    error <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> downloadFail <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> options      downloadFail <span class="token operator">&amp;&amp;</span> <span class="token function">downloadFail</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> download</code></pre><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob">https://developer.mozilla.org/zh-CN/docs/Web/API/Blob</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL">https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/Using_files_from_web_applications">https://developer.mozilla.org/zh-CN/docs/Web/API/File/Using_files_from_web_applications</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL">https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL</a></li></ul><h3 id="window-open"><a href="#window-open" class="headerlink" title="window.open"></a>window.open</h3><p>这个方法也是可以在直接下载二进制的文件的，这个就不详细介绍了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨项目区块复用方案实践</title>
      <link href="2020/10/14/Bit-%E8%B7%A8%E9%A1%B9%E7%9B%AE%E5%8C%BA%E5%9D%97%E5%A4%8D%E7%94%A8%E6%96%B9%E6%A1%88%E5%AE%9E%E8%B7%B5/"/>
      <url>2020/10/14/Bit-%E8%B7%A8%E9%A1%B9%E7%9B%AE%E5%8C%BA%E5%9D%97%E5%A4%8D%E7%94%A8%E6%96%B9%E6%A1%88%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在平时的前端业务开发中，常常需要使用一些组件库里的组件开发页面。然而单单这些组件一般很难完全满足业务需求，还需要针对不同的业务场景进行开发添加业务逻辑。当随着开发的前端项目数量越来越多，就会发现很多业务场景会经常遇到，而且基本大同小异，可能只需要修改少量的代码，原来开发的代码就可以在新的项目中使用。</p><p>例如账号绑定手机号这个场景，除了使用了 input、button 等组件等，还要添加很多例如校验手机号、设置倒计时、接口校验验证码等逻辑。如果输入验证码的样式比较特别，可能还会有基于通用 input 组件二次封装出专门针对验证码的输入框。当再次遇到类似绑定手机号的需求时，大部分前端往往会直接从原有的项目中拷贝一份到新的项目，然后做一些微调即可。</p><p>这方式可能会遇到以下几个问题：</p><ul><li><strong>可复用的业务场景代码散落在形形色色的前端业务项目中，信息不互通，跨项目搜索很难</strong>。<br>往往需要问些资历比较深的开发同事，才能知道某个业务场景在哪个项目中开发过。如果刚来的开发同事并不知道之前已经开发过，而是自己闷头从零开发，就会导致开发资源浪费的问题。</li><li><strong>相似的业务场景在不同的业务项目里有着不同的代码实现，无法做到统一标准，共同实现一个最佳实践</strong>。<br>平时开发时经常会有这样一个问题：在不同的业务项目中都编写过相似的业务场景的代码，但都是不同人各自维护的，之间也没有过交流。就会导致后面新的项目开发相似的业务场景时，面临有多个版本代码的选择。无法做到共同维护一个版本代码，并不断优化和改造，最终实现在这个业务场景的最佳实践。</li></ul><p>后面的内容就是笔者为了解决上述问题，而开发的跨项目区块复用平台的实践总结。讲到这里读者可能会有个疑问：什么是区块？为什么是区块复用而不是组件复用？</p><p>为了解答这个问题，我们先明确下这些概念的定义，下面直接引用阿里飞冰相关的定义：</p><p>组件（component）：功能比较确定同时复杂度较高，例如用户选择器、地址选择器等，项目中只需要引入对应的 npm 包即可，项目不关心也无法修改组件内部的代码，只能通过组件定义的 props 控制。</p><p>区块（block）：一般是一个 UI 模块，使用区块时会将区块代码拷贝到项目代码中，项目里可以对区块代码进行任何改动，因此区块后续的升级也不会对项目有任何影响，这是区块跟业务组件的最大区别。</p><p>对于组件，笔者所在公司有一个非常完善的流程了：将可复用的代码抽象成基础/业务组件，然后走 npm 包发布的流程，并展示在内建的组件平台上。使用者只需要在平台上找到自己需要的组件，然后通过私有 npm 源下载到项目的依赖中即可使用。</p><p>而对于区块，一般很难抽象成组件并集成到 npm 包里，使用时往往需要直接修改区块的源码。而针对区块的复用，目前并没有合适的工具可以使用，所以才会主要针对区块实现了一个可共享复用的平台。特别说明一下，本文的区块除了包括 UI 相关的代码，也包括一些可复用的 utils 方法等等。</p><p>这个平台是基于 <a href="https://github.com/teambit/bit">Bit</a> 开发的，所以在阐述区块复用平台的实现之前，需要先介绍下 Bit 的原理。</p><h2 id="Bit-基本原理"><a href="#Bit-基本原理" class="headerlink" title="Bit 基本原理"></a>Bit 基本原理</h2><p>为了避免读者的困扰，这里先提前声明一下，在这个小节里会经常出现 <code>组件</code> 这一词，读者可以理解成 <code>Bit 组件</code>–即可复用的代码片段。原因是 Bit 本身并没有区分组件和区块，凡是可复用的代码片段都可以通过 Bit 来实现复用，只是笔者主要用它来实现区块共享而已。下面是 Bit 的原理图：</p><p><img src="https://camo.githubusercontent.com/55572ce94daee1f3683a29ae01f2f3b62ac65889/68747470733a2f2f692e6c6f6c692e6e65742f323032302f30392f31322f7432736e4850784d6c4236557076592e706e67" alt="Bit 原理图.png"></p><p>Bit 是一个用于跨项目组件协作的开源 CLI 工具。使用 Bit 将分散在各个项目中的组件转化可复用的 Package，并可以跨项目使用。</p><p>你可以设置自己的用于组件协作的服务，也可以使用 <a href="https://bit.dev/">Bit.dev cloud</a> 托管组件，用于私有或共有组件的共享。</p><p>上面是 Bit 官方文档对 Bit 的定义，读者可能会觉得和 Git 有点相似。Bit 的确在实现中受到 Git 很大启发。不过区别在于 Git 是以文件为维度的，而 Bit 是以组件为维度。想了解更多内容可以点击 <a href="https://docs.bit.dev/docs/quick-start">Bit Docs</a> 。</p><h3 id="Bit-组件的定义和要素"><a href="#Bit-组件的定义和要素" class="headerlink" title="Bit 组件的定义和要素"></a>Bit 组件的定义和要素</h3><p>关于上面定义中的提到 Bit 组件，Bit 也给出了自己的定义：</p><ul><li><strong>一个 React, Vue or Angular 组件</strong></li><li><strong>公共样式文件 (例如 CSS, SCSS)</strong></li><li><strong>可复用的方法</strong></li></ul><p>针对每个组件 Bit 主要存储以下三个要素：</p><ul><li><strong>源代码（包括代码、测试和文档）</strong></li><li><strong>依赖图谱</strong><br>当添加文件到 Bit 组件时，Bit 会分析该文件的引入的依赖（例如代码中的 import 或 require 语句）。依赖图谱使组件独立于项目存在，可以跨项目移动且不丢失任何引用。<br>需要注意的是，这里追踪的依赖项只包含使用 NPM 安装的依赖和安装的 Bit 组件。也就是说项目中直接引入的本地文件不被包含在依赖项内，例如 <code>import &#123; computeXXX &#125; from &#39;../utils&#39;</code>。不过不必担心，当在本地执行发布组件到远程的命令时，Bit 会检测引入的本地文件是否也被追踪，没有的话是无法发布的。</li><li><strong>工具和配置</strong><br>Bit 还会将组件特有的工具和配置保存下来，比如组件使用的编译器和测试工具等。</li></ul><p>下面这张图生动的呈现了一个 Bit 组件的构成要素。</p><p><img src="https://camo.githubusercontent.com/9c2e6ccc97cc91dc677ef068615d6f3b54d1a1e3/68747470733a2f2f692e6c6f6c692e6e65742f323032302f30392f32372f5a6244487838316e4b494a477a516a2e706e67" alt="Bit-component.png"></p><h3 id="Bit-组件的生命周期"><a href="#Bit-组件的生命周期" class="headerlink" title="Bit 组件的生命周期"></a>Bit 组件的生命周期</h3><p>Bit 组件的发布和使用都是通过开源的 CLI 工具 <a href="https://www.npmjs.com/package/bit-bin">bit-bin</a> 来实现的，读者可以在自己的电脑上全局安装这个 npm 包，尝试用它发布个组件体验下。</p><h4 id="发布组件到远程仓库"><a href="#发布组件到远程仓库" class="headerlink" title="发布组件到远程仓库"></a>发布组件到远程仓库</h4><ul><li><strong>Track</strong>: 通过指定组成组件的文件，来初始化一个 Bit 组件。同时这些文件的内容修改会被追踪。具体命令：<code>bit add src/bindPhone/xxx -i bindPhone</code>。</li><li><strong>Version</strong>: 给组件标记版本，会将这个版本的组件的元数据和文件内容固化下来。具体命令：<code>bit tag bindPhone 1.0.0</code>。</li><li><strong>Export</strong>: 导出组件会为组件创建一个唯一的 ID。这个唯一 ID 包含了 Remote Scope 和本地组件名称。export 指令会将组件的元数据和文件内容的拷贝推送到远程仓库。具体命令：<code>bit export [remoteScopeName]</code>。</li></ul><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>当组件被推送到服务器上的远程仓库，其他本地的 Bit WorkSpace 就可以使用这个组件了。使用的方式包括了两种：一种是 Install 方式–将组件作为一个常规的 npm 包安装到 node_modules 中，另一种方式是 Import 方式–将组件的源代码以及依赖等信息下载到本地。</p><p>读者可以再结合下面这张图来理解上面 Bit 组件生命周期的内容。</p><p><img src="https://camo.githubusercontent.com/56db808214a9b3e88ffe618e132bed56c8e0d3ab/68747470733a2f2f692e6c6f6c692e6e65742f323032302f30392f32372f35715554504144534a4e61496243562e706e67" alt="Bit-CLI.png"></p><h3 id="Bit-部分概念解释"><a href="#Bit-部分概念解释" class="headerlink" title="Bit 部分概念解释"></a>Bit 部分概念解释</h3><h4 id="Workspace（工作区）"><a href="#Workspace（工作区）" class="headerlink" title="Workspace（工作区）"></a>Workspace（工作区）</h4><p>当在前端业务项目中执行 <code>bit init</code> 命令时，整个业务项目就变成了 workspace（工作区），类似 Git 中的工作区概念。</p><h4 id="Scope（仓库）"><a href="#Scope（仓库）" class="headerlink" title="Scope（仓库）"></a>Scope（仓库）</h4><p>当在前端业务项目中执行 <code>bit init</code> 命令时，会生成一个 <code>.bit</code>目录，这个目录就是 bit scope（仓库），类似 Git 的 .git 目录就是 git repository（仓库）。</p><p>一个 scope 可以存在或者不存在 Bit 工作区中，组件通过 <code>bit export</code> 和 <code>bit import</code> 命令在不同的 scope 之间传递，另外也可以使用 <code>bit tag</code> 和 <code>bit checkout</code> 命令将单个版本的组件从本地 scope（仓库） 和本地 workspace（工作区） 之间进行转换。</p><p>组件在 scope 中是采用 CAS(content addressable storage 内容寻址存储) 存储的，关于 scope 的存储的原理后面会详细阐述。Bit 受到了 Git 的机制很大的启发，如果读者对 Git 熟悉的话，就会更容易理解 Bit。</p><h4 id="Remote-Scope（远程仓库）"><a href="#Remote-Scope（远程仓库）" class="headerlink" title="Remote Scope（远程仓库）"></a>Remote Scope（远程仓库）</h4><p>Remote scope 是保存在服务器上的，也可以叫 bare scope，因为这个 scope（仓库） 是在 workspace（工作区） 之外的。Remote scope 是主要是用于共享组件的，也就是组件的导出/导入的地方。</p><h2 id="实现跨项目区块复用方案"><a href="#实现跨项目区块复用方案" class="headerlink" title="实现跨项目区块复用方案"></a>实现跨项目区块复用方案</h2><p>通过上面的介绍，相信读者对 Bit 已经有了初步认知，其实笔者认为 Bit 非常适合跨项目区块复用平台的最主要的原因在于：发布者无需类似发布 npm 一样，需要单独创建项目并发布，而是<strong>可以直接在业务项目中发布可复用的区块代码</strong>。这一点非常适用区块的<strong>很难抽象且代码在项目中可以任意改动的特点</strong>。</p><p>那么剩下需要思考的问题就是如何在 Bit 基础上实现整个跨项目区块复用平台方案。下面这张图是整个方案的架构图，下面的小节会针对架构图中的不同部分分别做阐述。</p><p><img src="https://camo.githubusercontent.com/4dd72bba83b25a142a077ed374123b6be74e2732/68747470733a2f2f692e6c6f6c692e6e65742f323032302f30392f31332f56754155764e777833533166486f5a2e706e67" alt="区块复用平台基本原理"></p><h3 id="Bit-远程仓库（Bit-Remote-Scope）"><a href="#Bit-远程仓库（Bit-Remote-Scope）" class="headerlink" title="Bit 远程仓库（Bit Remote Scope）"></a>Bit 远程仓库（Bit Remote Scope）</h3><p>Bit 官方已经提供了在服务器上部署远程仓库的方案，可以在远程服务器上执行 Bit 的<code>bit init --bare</code> 命令初始化一个远程仓库，或者直接部署 Bit 官方提供的 Docker 镜像 <a href="https://github.com/teambit/bit-docker">bit-docker</a>。</p><p>部署完远程仓库后，使用者就可以通过 ssh 协议将本地仓库的区块代码上传到远程仓库中，或者从远程仓库中下载区块代码。</p><p>更多细节可以参考官方文档 <a href="https://docs.bit.dev/docs/bit-server">bit-server</a>。</p><h3 id="Bit-CLI"><a href="#Bit-CLI" class="headerlink" title="Bit CLI"></a>Bit CLI</h3><p>上个小节中提到的上传和下载区块代码的操作都是通过 Bit 开源的 CLI 工具 <a href="https://www.npmjs.com/package/bit-bin">bit-bin</a> 实现的，读者可以直接在实际开发中使用。</p><p>不过如果有一些特定的需求，例如在执行 <code>bit import</code> 下载区块代码时，需要记录下载次数到区块平台中等，就需要定制 <a href="https://www.npmjs.com/package/bit-bin">bit-bin</a>。对此笔者建议直接克隆一份 Bit 源码 <a href="https://github.com/teambit/bit">bit</a>，然后进行二次定制开发，并通过在公司内部发布私有 npm 包的方式提供开发使用。</p><h3 id="区块平台"><a href="#区块平台" class="headerlink" title="区块平台"></a>区块平台</h3><p>经过上面的操作，区块代码已经托管在服务器上的远程仓库（Remote Scope）中，但区块使用者还无法很直观地通过查看区块代码构建出来的视图来选择区块，也无法对区块代码进行在线调试查看效果，这对区块的使用造成了很大困扰。</p><p>而官方提供的门户站点 <a href="https://bit.dev/">bit.dev</a> 虽然有这些功能但并没有开源，所以我们需要做一个类似功能的站点。通过分析 <a href="https://bit.dev/">bit.dev</a> 站点的功能，可以发现站点实现中的两个关键点：</p><ol><li>实时构建区块代码，然后对构建出的页面截图，展示在区块列表中。并且可以在线调试区块源码，然后实时看到调试后的构建结果；</li><li>从远程仓库存储的文件中解析出某个区块的数据（源码、依赖等等），以便在区块平台中使用。</li></ol><p>关于第一点，主要需要一个在线 IDE 的支持，对此笔者之前已经总结了一篇文章–<a href="https://github.com/mcuking/blog/issues/86">搭建一个属于自己的在线 IDE</a>，这里就不再赘述了。接下来主要阐述下第二点的实现。</p><h4 id="从远程仓库中解析区块数据"><a href="#从远程仓库中解析区块数据" class="headerlink" title="从远程仓库中解析区块数据"></a>从远程仓库中解析区块数据</h4><p>还记得之前有提到 Bit 的 Scope（仓库） 是采用 CAS（content addressable storage 内容寻址存储） 存储 Bit 组件的文件吗？接下来我们就详细的介绍其中的原理。</p><p>经过对 Bit 源码的分析，我们发现 Bit 组件的文件存储和 Git 非常相似，所以首先了解下 Git 是怎么做文件存储的，这里主要参考了文章 <a href="https://zhaohuabing.com/post/2019-01-21-git/">Git 内部存储原理</a> 的内容：</p><p>Git 的本质是一个文件系统，其工作空间中的所有文件的历史版本以及提交记录(Commit)、branch、tag 等信息都是以文件对象的方式保存在 .git 目录中的。在 .git 下的 objects 目录下可能会看下面这类文件：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">.</span>git<span class="token operator">/</span>objects├── <span class="token number">06</span>│   └── 5bcad11008c5e958ff743f2445551e05561f59├── 3b│   └── 18e512dba79e4c8300dd08aeb37f8e728b8dad├── info└── pack</code></pre><p>Git Objects 目录中的文件类型主要有以下三种：</p><ul><li><strong>Commit</strong>: Commit 对象，记录了一个 Version 的所有目录和文件信息</li><li><strong>Tree</strong>: 目录对象，记录了该目录下包含那些目录和文件信息</li><li><strong>Blob</strong>: 文件对象，记录了文件内容</li></ul><p>而 Git Objects 是通过下面的方式处理并存储在 Git 内部的文件系统中的：</p><ol><li>首先创建一个 header，header 的值为 “对象类型 内容长度\0”；</li><li>将 header 和文件内容连接起来，计算得到其 SHA-1 hash 值（40 个十六进制的数字组成的字符串）；</li><li>将连接得到的内容采用 zlib 压缩；</li><li>将压缩后的内容写入到以 “hash 值前两位命令的目录/hash 值后 38 位命令的文件” 中。</li></ol><p>在 Bit 源码中， Bit Scope 中的 objects 文件也分成以下几种类型：</p><ul><li><strong>Component</strong>: 记录了 Bit 组件的相关信息，包括区块名称、历史版本等</li><li><strong>Version</strong>: 记录了每次发布的版本信息，例如这次版本的包含的文件、依赖、发布者邮箱/用户名、发布时间等</li><li><strong>Source</strong>: 记录了文件内容</li><li><strong>Symlink</strong>: 暂时无用</li><li><strong>Scope</strong>: 暂时无用</li></ul><p>而 Bit Objects 在处理和存储上面这些信息的方式也和 Git 大同小异：</p><ol><li>首先根据文件内容计算得到其 SHA-1 hash 值（40 个十六进制的数字组成的字符串）；</li><li>然后创建一个 header，header 的值为 “对象类型 文件内容的 SHA-1 hash 值 内容长度\0”；</li><li>将 header 和文件内容连接起来；</li><li>将连接得到的内容采用 zlib 压缩；</li><li>将压缩后的内容写入到以 “hash 值前两位命令的目录/hash 值后 38 位命令的文件” 中。</li></ol><p>区别在于两点：一个是 Git 是根据 <code>header + 文件内容</code> 两者相加组成的完整内容计算的 SHA-1 hash 值，而 Bit 仅仅根据文件内容计算 SHA-1 hash 值；另一个点是 Bit 的 header 中还额外包括文件内容的 SHA-1 hash 值。</p><p>既然我们知道了数据是如何被处理和存储成这些文件，那么就可以反过来从这些文件中解析出这些数据，下面就是解析文件的方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> zlib <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'zlib'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs-extra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> SPACE_DELIMITER <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token keyword">const</span> NULL_BYTE <span class="token operator">=</span> <span class="token string">'\u0000'</span><span class="token punctuation">;</span><span class="token keyword">const</span> inflate <span class="token operator">=</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        zlib<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将对象转化成 buffer    const buf = Buffer.from(JSON.stringify(obj));</span><span class="token comment" spellcheck="true">// 将 buffer 转化成对象   const temp = JSON.parse(buf.toString());</span><span class="token keyword">const</span> parse <span class="token operator">=</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用分隔符号 '\u0000' 将文件内容分成 header 和 content 两部分</span>    <span class="token keyword">const</span> firstNullByteLocation <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>NULL_BYTE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 头部部分</span>    <span class="token keyword">const</span> headers <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> firstNullByteLocation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 内容部分</span>    <span class="token keyword">const</span> contents <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>firstNullByteLocation <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>SPACE_DELIMITER<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'file type is:'</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'Source'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> contents<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> parseObject <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">await</span> fs        <span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fileContents <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">inflate</span><span class="token punctuation">(</span>fileContents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>buffer <span class="token operator">=</span><span class="token function">parse</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'file contents is:'</span><span class="token punctuation">,</span> contents<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> contents<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token string">'/Users/xxx/bit/common/objects/03/3cb8b37245cf0cfbde2495d5d88c1324234e96'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后就可以调用 parseObject 方法去解析不同类型文件的内容，例如 Component 文件的示例内容如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">'button'</span><span class="token punctuation">,</span>  scope<span class="token punctuation">:</span> <span class="token string">'common'</span><span class="token punctuation">,</span>  versions<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">'1.0.0'</span><span class="token punctuation">:</span> <span class="token string">'4873cd3d4efdd585ee9a960bdfb16f2ee986ab14'</span><span class="token punctuation">,</span>    <span class="token string">'1.0.1'</span><span class="token punctuation">:</span> <span class="token string">'e1e8280f56c5bfca8640e186f5667286b2023927'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  lang<span class="token punctuation">:</span> <span class="token string">'javascript'</span><span class="token punctuation">,</span>  deprecated<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  bindingPrefix<span class="token punctuation">:</span> <span class="token string">'@bit'</span><span class="token punctuation">,</span>  remotes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      url<span class="token punctuation">:</span> <span class="token string">'file:///Users/xxx/bit/common'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'common'</span><span class="token punctuation">,</span>      date<span class="token punctuation">:</span> <span class="token string">'1599218799176'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Version 文件示例内容如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  files<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      file<span class="token punctuation">:</span> <span class="token string">'0b8b28f212101ef236744a25bfa085a00d0e7a63'</span><span class="token punctuation">,</span>      relativePath<span class="token punctuation">:</span> <span class="token string">'src/components/button/index.js'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'index.js'</span><span class="token punctuation">,</span>      test<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  mainFile<span class="token punctuation">:</span> <span class="token string">'src/components/button/index.js'</span><span class="token punctuation">,</span>  bindingPrefix<span class="token punctuation">:</span> <span class="token string">'@bit'</span><span class="token punctuation">,</span>  log<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    message<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    date<span class="token punctuation">:</span> <span class="token string">'1599218793164'</span><span class="token punctuation">,</span>    username<span class="token punctuation">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>    email<span class="token punctuation">:</span> <span class="token string">'xxx@xxx.com'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  ci<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  docs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  dependencies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  devDependencies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  flattenedDependencies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  flattenedDevDependencies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  packageDependencies<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> react<span class="token punctuation">:</span> <span class="token string">'^16.13.1'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  devPackageDependencies<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Source 文件内容其实就是区块的源码，这里就不展示了。</p><p>接下来的分析中又发现本地 scope 中（即 .bit 目录中）的 index.json 文件中记录了 Bit 组件的对应的 Component 文件的 SHA-1 hash 值。如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    id<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      scope<span class="token punctuation">:</span> <span class="token string">'common'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'button'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    isSymlink<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    hash<span class="token punctuation">:</span> <span class="token string">'2179ca06272f0962fafd793abdf27a553fd9b418'</span> <span class="token comment" spellcheck="true">// 对应组件的 Component 文件</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><p>根据以上分析到的知识点，我们就可以找出从远程仓库 Scope 的 Objects 中解析出我们需要的区块源代码的方法了，大致步骤如下：</p><ol><li>首先从 scope 中的 index.json 中找到对应区块名称，并获取到区块对应的 Component 文件的 hash 值；</li><li>使用上面的 parseObject 方法解析出 Component 文件的内容，并从 Component 文件内容中的 versions 字段找到区块最新版本对应的 Version 文件的 hash 值；</li><li>使用上面的 parseObject 方法解析出 Version 文件的内容，从 Version 文件内容中的 files 字段就可以找到该区块包含的所有源码文件名称、相对路径、hash 值等，从 dependencies、devDependencies 等字段中就可以获取区块所有的依赖；</li><li>将上个步骤中获取到的区块源代码/依赖等数据，按照一定的格式返回给区块平台即可。</li></ol><p>这样就达到了从 Bit 远程仓库中解析出某个区块的源码和依赖等数据，并返回给区块平台的目的。由于篇幅有限，具体代码就不在这里展示了。</p><p>到此整个架构的实践就已将介绍完了。当然在这个基础上还可以做很多有趣的事情，例如编写一个 VSCode 插件用于在编辑器右侧展示区块平台上的所有区块，用户可以搜索浏览区块，点击区块即可下载到项目中，并自动引入到代码里。效果如下图所示：</p><p><img src="https://camo.githubusercontent.com/2e72218162b41cd66cf45e328c961d8efd77ce09/68747470733a2f2f692e6c6f6c692e6e65742f323032302f30392f32372f5857767449426f52616a78413754702e706e67" alt="区块 VSCode 插件"></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>如果做个类比的话，区块复用平台就像冶金设备，而前端的业务项目就像一座座矿山，区块复用平台的使命就是从这么多前端项目中冶炼出有复用价值的金子–区块，并将这些金子直观地展示给开发者，使其尽可能复用这些区块，以提升开发效率。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>-<a href="https://ice.work/docs/materials/about">飞冰-关于物料</a></p><p>-<a href="https://zhaohuabing.com/post/2019-01-21-git/">Git 内部存储原理</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Bit </tag>
            
            <tag> 区块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebComponent 简单尝试</title>
      <link href="2020/10/12/WebComponent-%E7%AE%80%E5%8D%95%E5%B0%9D%E8%AF%95/"/>
      <url>2020/10/12/WebComponent-%E7%AE%80%E5%8D%95%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天我们要站在开发者和项目角度来聊聊 WebComponent，同样它也是一套技术的组合，能提供给开发者组件化开发的能力。</p></blockquote><p>那什么是组件化呢？其实组件化并没有一个明确的定义，不过这里我们可以使用 10 个字来形容什么是组件化，那就是：对内高内聚，对外低耦合。对内各个元素彼此紧密结合、相互依赖，对外和其他组件的联系最少且接口简单。</p><p>可以说，程序员对组件化开发有着天生的需求，因为一个稍微复杂点的项目，就涉及到多人协作开发的问题，每个人负责的组件需要尽可能独立完成自己的功能，其组件的内部状态不能影响到别人的组件，在需要和其他组件交互的地方得提前协商好接口。通过组件化可以降低整个系统的耦合度，同时也降低程序员之间沟通复杂度，让系统变得更加易于维护。使用组件化能带来很多优势，所以很多语言天生就对组件化提供了很好的支持，比如 C/C++ 就可以很好地将功能封装成模块，无论是业务逻辑，还是基础功能，抑或是 UI，都能很好地将其组合在一起，实现组件内部的高度内聚、组件之间的低耦合。</p><p>大部分语言都能实现组件化，归根结底在于编程语言特性，大多数语言都有自己的函数级作用域、块级作用域和类，可以将内部的状态数据隐藏在作用域之下或者对象的内部，这样外部就无法访问了，然后通过约定好的接口和外部进行通信。</p><p>JavaScript 虽然有不少缺点，但是作为一门编程语言，它也能很好地实现组件化，毕竟有自己的函数级作用域和块级作用域，所以封装内部状态数据并提供接口给外部都是没有问题的。</p><p>既然 JavaScript 可以很好地实现组件化，那么我们所谈论的 WebComponent 到底又是什么呢？</p><p>阻碍前端组件化的因素在前端虽然 HTML、CSS 和 JavaScript 是强大的开发语言，但是在大型项目中维护起来会比较困难，如果在页面中嵌入第三方内容时，还需要确保第三方的内容样式不会影响到当前内容，同样也要确保当前的 DOM 不会影响到第三方的内容。所以要聊 WebComponent，得先看看 HTML 和 CSS 是如何阻碍前端组件化的，这里我们就通过下面这样一个简单的例子来分析下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span>p <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      background<span class="token operator">-</span>color<span class="token punctuation">:</span> brown<span class="token punctuation">;</span>      color<span class="token punctuation">:</span> cornsilk   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>org<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span>p <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      background<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>      color<span class="token punctuation">:</span> blue   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>p<span class="token operator">></span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><p>上面这两段代码分别实现了自己 p 标签的属性，如果两个人分别负责开发这两段代码的话，那么在测试阶段可能没有什么问题，不过当最终项目整合的时候，其中内部的 CSS 属性会影响到其他外部的 p 标签的，之所以会这样，是因为 CSS 是影响全局的</p><p>除了 CSS 的全局属性会阻碍组件化，DOM 也是阻碍组件化的一个因素，因为在页面中只有一个 DOM，任何地方都可以直接读取和修改 DOM。所以使用 JavaScript 来实现组件化是没有问题的，但是 JavaScript 一旦遇上 CSS 和 DOM，那么就相当难办了。</p><h3 id="WebComponent-组件化开发"><a href="#WebComponent-组件化开发" class="headerlink" title="WebComponent 组件化开发"></a>WebComponent 组件化开发</h3><p>现在我们了解了 CSS 和 DOM 是阻碍组件化的两个因素，那要怎么解决呢？WebComponent 给出了解决思路，它提供了对局部视图封装能力，可以让 DOM、CSSOM 和 JavaScript 运行在局部环境中，这样就使得局部的 CSS 和 DOM 不会影响到全局。了解了这些，下面我们就结合具体代码来看看 WebComponent 是怎么实现组件化的。</p><p>前面我们说了，WebComponent 是一套技术的组合，具体涉及到了 Custom elements（自定义元素）、Shadow DOM（影子 DOM）和 HTML templates（HTML 模板），详细内容你可以参考 MDN 上的<a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components">相关链接</a>。</p><p>下面我们就来演示下这 3 个技术是怎么实现数据封装的，如下面代码所示：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>            一：定义模板            二：定义内部CSS样式            三：定义JavaScript行为    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"geekbang-t"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>style<span class="token operator">></span>            p <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                background<span class="token operator">-</span>color<span class="token punctuation">:</span> brown<span class="token punctuation">;</span>                color<span class="token punctuation">:</span> cornsilk            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            div <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>                background<span class="token operator">-</span>color<span class="token punctuation">:</span> bisque<span class="token punctuation">;</span>                border<span class="token punctuation">:</span> 3px solid chocolate<span class="token punctuation">;</span>                border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>time<span class="token punctuation">.</span>geekbang<span class="token punctuation">.</span>org<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>time1<span class="token punctuation">.</span>geekbang<span class="token punctuation">.</span>org<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>script<span class="token operator">></span>            <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'inner log'</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">class</span> <span class="token class-name">GeekBang</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//获取组件模板</span>                <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#geekbang-t'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content                <span class="token comment" spellcheck="true">//创建影子DOM节点</span>                <span class="token keyword">const</span> shadowDOM <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> mode<span class="token punctuation">:</span> <span class="token string">'open'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//将模板添加到影子DOM上</span>                shadowDOM<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'geek-bang'</span><span class="token punctuation">,</span> GeekBang<span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>geek<span class="token operator">-</span>bang<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>geek<span class="token operator">-</span>bang<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>time<span class="token punctuation">.</span>geekbang<span class="token punctuation">.</span>org<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>time1<span class="token punctuation">.</span>geekbang<span class="token punctuation">.</span>org<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>geek<span class="token operator">-</span>bang<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>geek<span class="token operator">-</span>bang<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>详细观察上面这段代码，我们可以得出：要使用 WebComponent，通常要实现下面三个步骤。</p><p>首先，使用 <strong>template 属性来创建模板</strong>。利用 DOM 可以查找到模板的内容，但是模板元素是不会被渲染到页面上的，也就是说 DOM 树中的 template 节点不会出现在布局树中，所以我们可以使用 template 来自定义一些基础的元素结构，这些基础的元素结构是可以被重复使用的。一般模板定义好之后，我们还需要在模板的内部定义样式信息。</p><p>其次，我们需要创建一个 <strong>GeekBang 的类</strong>。</p><p>在该类的构造函数中要完成三件事：</p><ul><li>查找模板内容；</li><li>创建影子 DOM；</li><li>再将模板添加到影子 DOM 上。</li></ul><p>上面最难理解的是<strong>影子 DOM</strong>，其实影子 DOM 的作用是将模板中的内容与全局 DOM 和 CSS 进行隔离，这样我们就可以实现元素和样式的私有化了。你可以把影子 DOM 看成是一个作用域，其内部的样式和元素是不会影响到全局的样式和元素的，而在全局环境下，要访问影子 DOM 内部的样式或者元素也是需要通过约定好的接口的。总之，通过影子 DOM，我们就实现了 CSS 和元素的封装，在创建好封装影子 DOM 的类之后，我们就可以使用 <strong>customElements.define</strong> 来自定义元素了（可参考上述代码定义元素的方式）。</p><p>最后，就很简单了，可以像正常使用 HTML 元素一样使用该元素，如上述代码中的<code>&lt;geek-bang&gt;&lt;/geek-bang&gt;</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> WebComponent </tag>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebComponent 个人理解</title>
      <link href="2020/10/12/WebComponet-%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
      <url>2020/10/12/WebComponet-%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="接下来自己开始依照个人计划开始-WebComponent-相关技术的深入研究"><a href="#接下来自己开始依照个人计划开始-WebComponent-相关技术的深入研究" class="headerlink" title="接下来自己开始依照个人计划开始 WebComponent 相关技术的深入研究"></a>接下来自己开始依照个人计划开始 WebComponent 相关技术的深入研究</h3><p>Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且在您的 web 应用中使用它们。</p><hr><p>Web Component 的诞生本身是为了更加方便的去定义组件，它有着天然的样式隔离和作用域空间。这也符合了组件的最基本的特点：** 高内聚、低耦合 **。</p><p>一个好的组件库，本身肯定有着自己的样式管理、工具类管理等规范。根本目的就是要做的相互隔离，不受其他的样式和功能影响。但是实际的开发中，有些情况是避免不了的；复杂度、专属语法、性能消耗的代价。</p><p>一般在开发中大家都会对组件库进行定制化的模改；样式、字体大小等方面。这些都涉及到了样式方面的改动</p><hr><p>现代浏览器的 API 已经更新到你不需要使用一个框架就可以去创建一个可服用的组件。Custom Element 和 Shadow DOM 都可以让你去创造可复用的组件。</p><p>最早在 2011 年，Web Components 就已经是一个只需要使用 HTML、CSS、JavaScript 就可以创建可复用的组件被介绍给大家。这也意味着你可以不使用类似 React 和 Angular 的框架就可以创造组件。甚至，这些组件可以无缝的接入到这些框架中。</p><p>这么久以来第一次，我们可以只使用 HTML、CSS、JavaScript 来创建可以在任何现代浏览器运行的可复用组件。Web Components 现在已经被主要的浏览器的较新版本所支持。</p><p>Edge 将会在接下来的 19 版本提供支持。而对于那些旧的版本可以使用 polyfill 兼容至 IE11. 这意味着你可以在当下基本上任何浏览器甚至移动端使用 Web Components。</p><p>创造一个你定制的 HTML 标签，它将会继承 HTM 元素的所有属性，并且你可在任何支持的浏览器中通过简单的引入一个 script。所有的 HTML、CSS、JavaScript 将会在组件内部局部定义。 这个组件在你的浏览器开发工具中显示为一个单独个 HTML 标签，并且它的样式和行为都是完全在组件内进行，不需要工作区，框架和一些前置的转换。</p><p>是不是有些心动了；</p><p>Web Components 的一些主要功能：<br>未完。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> WebComponent </tag>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/11/hello-world/"/>
      <url>2020/10/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
